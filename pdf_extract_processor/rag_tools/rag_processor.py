"""
RAG Tools –¥–ª—è Extract_Processor
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º
"""

import re
import os
from datetime import datetime
from typing import List, Dict, Any

def clean_npa_for_rag(text: str, document_title: str = "") -> str:
    """
    üßπ –ò–î–ï–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ù–ü–ê –î–õ–Ø RAG-–°–ò–°–¢–ï–ú–´
    –£–±–∏—Ä–∞–µ–º –í–°–Æ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    """
    
    # 1. –£–±–∏—Ä–∞–µ–º –í–°–Æ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    text = re.sub(r'# –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.*?---', '', text, flags=re.DOTALL)
    text = re.sub(r'\*\*–§–∞–π–ª:\*\*.*?\n', '', text)
    text = re.sub(r'\*\*–ö–∞—á–µ—Å—Ç–≤–æ:\*\*.*?\n', '', text)
    text = re.sub(r'\*\*–ú–µ—Ç–æ–¥:\*\*.*?\n', '', text)
    text = re.sub(r'\*\*–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:\*\*.*?\n', '', text)
    
    # 2. –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–¥—ã
    text = re.sub(r'--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ \d+ ---\n*', '', text)
    text = re.sub(r'=== –°—Ç—Ä–∞–Ω–∏—Ü–∞ \d+ ===\n*', '', text)
    
    # 3. –£–±–∏—Ä–∞–µ–º OCR –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    text = re.sub(r'\n[–ê-–Ø]{1,3}\s*\n', '\n', text)
    text = re.sub(r'\n[^\w\s]{1,3}\n', '\n', text)
    
    # 4. –£–ª—É—á—à–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è RAG
    lines = text.split('\n')
    clean_lines = []

    for line in lines:
        line = line.strip()
        if not line:
            continue

        # –ì–ª–∞–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ä–≥–∞–Ω–æ–≤ –≤–ª–∞—Å—Ç–∏
        if re.match(r'(–ü–†–ê–í–ò–¢–ï–õ–¨–°–¢–í–û|–ú–ò–ù–ò–°–¢–ï–†–°–¢–í–û|–§–ï–î–ï–†–ê–õ–¨–ù–ê–Ø –°–õ–£–ñ–ë–ê)', line):
            clean_lines.append(f'# {line}')
            continue

        # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if line in ['–ü–û–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï', '–ü–†–ò–ö–ê–ó', '–†–ê–°–ü–û–†–Ø–ñ–ï–ù–ò–ï', '–£–ö–ê–ó', '–†–ï–®–ï–ù–ò–ï']:
            clean_lines.append(f'## {line}')
            continue

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        if re.match(r'^\d+\.\s+[–ê-–Ø–Å]', line):
            clean_lines.append(f'### {line}')
            continue

        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        clean_lines.append(line)

    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    result = '\n\n'.join([line for line in clean_lines if line.strip()])
    result = re.sub(r' +', ' ', result)
    result = re.sub(r'\n{3,}', '\n\n', result)

    return result.strip()

class RAGDataProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RAG"""
    
    def __init__(self):
        self.processed_docs = []
        
    def process_multiple_npa(self, pdf_files: List[str]) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ù–ü–ê –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è RAG"""
        
        all_documents = []
        
        for pdf_file in pdf_files:
            try:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ PDF
                # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                clean_text = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {pdf_file}"
                
                all_documents.append({
                    'filename': pdf_file,
                    'content': clean_text,
                    'size': len(clean_text)
                })
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å {pdf_file}: {e}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if all_documents:
            combined_content = ["# –°–ë–û–†–ù–ò–ö –ù–û–†–ú–ê–¢–ò–í–ù–û-–ü–†–ê–í–û–í–´–• –ê–ö–¢–û–í", ""]
            
            for i, doc in enumerate(all_documents, 1):
                combined_content.append(f"## –î–æ–∫—É–º–µ–Ω—Ç {i}: {doc['filename']}")
                combined_content.append("")
                combined_content.append(doc['content'])
                combined_content.append("")
                combined_content.append("---")
                combined_content.append("")
            
            return '\n'.join(combined_content)
        
        return ""
