"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è PDF –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import os
from typing import List, Dict
from ..enhanced_processor import EnhancedPDFProcessor, diagnose_multiple_pdfs

def quick_pdf_test(pdf_path: str) -> None:
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç PDF —Ñ–∞–π–ª–∞"""
    processor = EnhancedPDFProcessor()
    diagnosis = processor.diagnose_pdf(pdf_path)
    
    print(f"üìÑ –§–∞–π–ª: {diagnosis['filename']}")
    print(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü: {diagnosis.get('pages', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: {diagnosis.get('encrypted', False)}")
    print(f"üìù –°–∏–º–≤–æ–ª–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {diagnosis.get('extractable_text', 0)}")
    print(f"üîç –¢—Ä–µ–±—É–µ—Ç OCR: {'–î–∞' if diagnosis.get('requires_ocr') else '–ù–µ—Ç'}")
    print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {diagnosis.get('quality', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

def analyze_pdf_batch(pdf_directory: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ –±–∞—Ç—á–∞ PDF —Ñ–∞–π–ª–æ–≤"""
    pdf_files = [
        os.path.join(pdf_directory, f) 
        for f in os.listdir(pdf_directory) 
        if f.lower().endswith('.pdf')
    ]
    
    return diagnose_multiple_pdfs(pdf_files)

def print_batch_analysis(analysis: Dict) -> None:
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –±–∞—Ç—á–∞"""
    print(f"üìä –ê–ù–ê–õ–ò–ó –ë–ê–¢–ß–ê PDF")
    print(f"=" * 30)
    print(f"üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {analysis['total_files']}")
    print(f"‚úÖ –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: {analysis['direct_extraction']}")
    print(f"üîç –¢—Ä–µ–±—É–µ—Ç OCR: {analysis['ocr_required']}")
    
    if analysis['ocr_required'] > 0:
        print(f"\nüîç –§–∞–π–ª—ã, —Ç—Ä–µ–±—É—é—â–∏–µ OCR:")
        for file_info in analysis['files']:
            if file_info.get('requires_ocr'):
                print(f"   - {file_info['filename']}")
