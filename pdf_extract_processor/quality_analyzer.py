"""
–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ PDF —Ñ–∞–π–ª–æ–≤
"""

import os
import time
import logging
from typing import Dict

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
from .main_processor import QualityLevel, FileUploader, PDFQualityAnalyzer

logger = logging.getLogger(__name__)

class IndependentQualityAnalyzer:
    def __init__(self):
        self.file_uploader = FileUploader()
        self.quality_analyzer = PDFQualityAnalyzer()
        
        self.quality_thresholds = {
            'text_ratio': 0.8,
            'image_quality': 0.7,
            'table_complexity': 0.6,
            'structure_complexity': 0.5
        }

    def analyze_files_quality(self):
        print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–ê–ß–ï–°–¢–í–ê PDF –§–ê–ô–õ–û–í")
        print("=" * 50)
        print("üìã –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:")
        print("  ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ PDF (—Ç–µ–∫—Å—Ç–æ–≤—ã–π/—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
        print("  ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print("  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print("=" * 50)

        file_paths = self.file_uploader.upload_files()

        if not file_paths:
            print("‚ùå –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return

        analysis_results = {}
        total_start_time = time.time()

        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(file_paths)} —Ñ–∞–π–ª–æ–≤...")
        print("-" * 50)

        for i, (filename, file_path) in enumerate(file_paths.items(), 1):
            print(f"\nüìÑ [{i}/{len(file_paths)}] –ê–Ω–∞–ª–∏–∑: {filename}")

            try:
                analysis_start = time.time()
                result = self._analyze_single_file(file_path, filename)
                analysis_time = time.time() - analysis_start

                result['analysis_time'] = analysis_time
                analysis_results[filename] = result

                self._print_file_summary(result)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {filename}: {e}")
                analysis_results[filename] = {
                    'status': 'error',
                    'error': str(e),
                    'analysis_time': 0
                }
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

        total_analysis_time = time.time() - total_start_time
        self._print_detailed_report(analysis_results, total_analysis_time)

        return analysis_results

    def _analyze_single_file(self, file_path: str, filename: str) -> dict:
        result = {
            'filename': filename,
            'file_path': file_path,
            'status': 'success'
        }

        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ PDF
        quality_level, confidence, method = self.quality_analyzer.analyze_pdf_quality(file_path)
        
        result.update({
            'quality_level': quality_level,
            'confidence': confidence,
            'recommended_method': method,
            'file_size': os.path.getsize(file_path)
        })

        return result

    def _print_file_summary(self, result: dict):
        if result.get('status') == 'error':
            print(f"‚ùå {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return

        quality = result.get('quality_level')
        confidence = result.get('confidence', 0)
        method = result.get('recommended_method', 'unknown')

        quality_emoji = {
            QualityLevel.A: 'üü¢',
            QualityLevel.B: 'üü°', 
            QualityLevel.C: 'üü†',
            QualityLevel.D: 'üî¥'
        }

        print(f"   {quality_emoji.get(quality, '‚ùì')} –ö–∞—á–µ—Å—Ç–≤–æ: {quality.value if quality else 'unknown'}")
        print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
        print(f"   ‚öôÔ∏è –ú–µ—Ç–æ–¥: {method}")

    def _print_detailed_report(self, results: dict, total_time: float):
        print("\n" + "=" * 60)
        print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –ö–ê–ß–ï–°–¢–í–ê")
        print("=" * 60)

        successful = [r for r in results.values() if r.get('status') != 'error']
        failed = len(results) - len(successful)

        print(f"\nüìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
        print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {len(successful)}")
        print(f"  ‚Ä¢ –û—à–∏–±–æ–∫: {failed}")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {total_time:.1f}—Å")

        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
